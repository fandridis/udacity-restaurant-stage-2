var dbPromise;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){dbPromise=idb.open("restaurants-db",1,t=>{t.createObjectStore("restaurants-store",{keyPath:"id"})}),fetch(DBHelper.DATABASE_URL).then(t=>t.json()).then(e=>(dbPromise.then(t=>{let r=t.transaction("restaurants-store","readwrite").objectStore("restaurants-store");e.forEach(t=>{r.put(t)})}),t(null,e))).catch(e=>{console.log(e),dbPromise.then(t=>{return t.transaction("restaurants-store").objectStore("restaurants-store").getAll()}).then(e=>t(null,e)).catch(e=>t(e,null))})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((r,s)=>{if(r)e(r,null);else{const r=s.find(e=>e.id==t);r?e(null,r):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,s)=>{if(r)e(r,null);else{const r=s.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,s)=>{if(r)e(r,null);else{const r=s.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((s,n)=>{if(s)r(s,null);else{let s=n;"all"!=t&&(s=s.filter(e=>e.cuisine_type==t)),"all"!=e&&(s=s.filter(t=>t.neighborhood==e)),r(null,s)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),s=e.filter((t,r)=>e.indexOf(t)==r);t(null,s)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),s=e.filter((t,r)=>e.indexOf(t)==r);t(null,s)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`./img/${t.id}.webp`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}static lazyload(){let t=[].slice.call(document.querySelectorAll(".lazyload"));if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype){let e=new IntersectionObserver(function(t,r){t.forEach(function(t){if(t.isIntersecting){let r=t.target;r.src=r.dataset.srcset,r.srcset=r.dataset.srcset,r.classList.remove("lazy"),e.unobserve(r)}})});t.forEach(function(t){e.observe(t)})}}}